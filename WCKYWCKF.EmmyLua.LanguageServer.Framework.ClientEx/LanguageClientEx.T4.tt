<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
using EmmyLua.LanguageServer.Framework;
using EmmyLua.LanguageServer.Framework.Protocol.Capabilities.Client.ClientCapabilities;
using EmmyLua.LanguageServer.Framework.Protocol.JsonRpc;
using EmmyLua.LanguageServer.Framework.Protocol.Message;
using EmmyLua.LanguageServer.Framework.Protocol.Message.CallHierarchy;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Client.ApplyWorkspaceEdit;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Client.PublishDiagnostics;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Client.Registration;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Client.ShowMessage;
using EmmyLua.LanguageServer.Framework.Protocol.Message.CodeAction;
using EmmyLua.LanguageServer.Framework.Protocol.Message.CodeLens;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Completion;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Configuration;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Declaration;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Definition;
using EmmyLua.LanguageServer.Framework.Protocol.Message.DocumentColor;
using EmmyLua.LanguageServer.Framework.Protocol.Message.DocumentDiagnostic;
using EmmyLua.LanguageServer.Framework.Protocol.Message.DocumentFormatting;
using EmmyLua.LanguageServer.Framework.Protocol.Message.DocumentHighlight;
using EmmyLua.LanguageServer.Framework.Protocol.Message.DocumentLink;
using EmmyLua.LanguageServer.Framework.Protocol.Message.DocumentSymbol;
using EmmyLua.LanguageServer.Framework.Protocol.Message.ExecuteCommand;
using EmmyLua.LanguageServer.Framework.Protocol.Message.FoldingRange;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Hover;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Implementation;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Initialize;
using EmmyLua.LanguageServer.Framework.Protocol.Message.InlayHint;
using EmmyLua.LanguageServer.Framework.Protocol.Message.InlineCompletion;
using EmmyLua.LanguageServer.Framework.Protocol.Message.InlineValue;
using EmmyLua.LanguageServer.Framework.Protocol.Message.LinkedEditingRange;
using EmmyLua.LanguageServer.Framework.Protocol.Message.NotebookDocument;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Progress;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Reference;
using EmmyLua.LanguageServer.Framework.Protocol.Message.Rename;
using EmmyLua.LanguageServer.Framework.Protocol.Message.SelectionRange;
using EmmyLua.LanguageServer.Framework.Protocol.Message.SemanticToken;
using EmmyLua.LanguageServer.Framework.Protocol.Message.SignatureHelp;
using EmmyLua.LanguageServer.Framework.Protocol.Message.TextDocument;
using EmmyLua.LanguageServer.Framework.Protocol.Message.TypeDefinition;
using EmmyLua.LanguageServer.Framework.Protocol.Message.TypeHierarchy;
using EmmyLua.LanguageServer.Framework.Protocol.Message.WorkspaceDiagnostic;
using EmmyLua.LanguageServer.Framework.Protocol.Message.WorkspaceFiles;
using EmmyLua.LanguageServer.Framework.Protocol.Message.WorkspaceFolders;
using EmmyLua.LanguageServer.Framework.Protocol.Message.WorkspaceSymbol;
using EmmyLua.LanguageServer.Framework.Protocol.Message.WorkspaceWatchedFile;
using EmmyLua.LanguageServer.Framework.Protocol.Model;
using EmmyLua.LanguageServer.Framework.Protocol.Model.TextEdit;
using WCKYWCKF.EmmyLua.LanguageServer.Framework.ClientEx.Protocol;

namespace WCKYWCKF.EmmyLua.LanguageServer.Framework.ClientEx;

public static partial class LanguageClientEx
{
    // Auto-generated common methods (LSP 3.17 compliant)
<#
    var standardRequests = new[]
    {
        // 生命周期
        new
        {
            Method = "InitializeRequest",
            ResultType = "InitializeResult",
            ParamsType = "InitializeParams",
            LspMethod = "initialize"
        },
        new { Method = "ShutdownRequest", ResultType = "object", ParamsType = "object", LspMethod = "shutdown" },

        // 文档同步
        new
        {
            Method = "WillSaveWaitUntilRequest",
            ResultType = "TextEdit[]",
            ParamsType = "WillSaveTextDocumentParams",
            LspMethod = "textDocument_willSaveWaitUntil"
        },

        // 语言功能
        new
        {
            Method = "CompletionRequest",
            ResultType = "CompletionList",
            ParamsType = "CompletionParams",
            LspMethod = "textDocument_completion"
        },
        new
        {
            Method = "HoverRequest",
            ResultType = "Hover",
            ParamsType = "HoverParams",
            LspMethod = "textDocument_hover"
        },
        new
        {
            Method = "SignatureHelpRequest",
            ResultType = "SignatureHelp",
            ParamsType = "SignatureHelpParams",
            LspMethod = "textDocument_signatureHelp"
        },
        new
        {
            Method = "DeclarationRequest",
            ResultType = "Location[]",
            ParamsType = "DeclarationParams",
            LspMethod = "textDocument_declaration"
        },
        new
        {
            Method = "DefinitionRequest",
            ResultType = "Location[]",
            ParamsType = "DefinitionParams",
            LspMethod = "textDocument_definition"
        },
        new
        {
            Method = "TypeDefinitionRequest",
            ResultType = "Location[]",
            ParamsType = "TypeDefinitionParams",
            LspMethod = "textDocument_typeDefinition"
        },
        new
        {
            Method = "ImplementationRequest",
            ResultType = "Location[]",
            ParamsType = "ImplementationParams",
            LspMethod = "textDocument_implementation"
        },
        new
        {
            Method = "ReferencesRequest",
            ResultType = "Location[]",
            ParamsType = "ReferenceParams",
            LspMethod = "textDocument_references"
        },
        new
        {
            Method = "DocumentHighlightRequest",
            ResultType = "DocumentHighlight[]",
            ParamsType = "DocumentHighlightParams",
            LspMethod = "textDocument_documentHighlight"
        },
        new
        {
            Method = "DocumentSymbolRequest",
            ResultType = "List<DocumentSymbol>",
            ParamsType = "DocumentSymbolParams",
            LspMethod = "textDocument_documentSymbol"
        },
        new
        {
            Method = "CodeActionRequest",
            ResultType = "List<CodeAction>",
            ParamsType = "CodeActionParams",
            LspMethod = "textDocument_codeAction"
        },
        new
        {
            Method = "CodeLensRequest",
            ResultType = "List<CodeLens>",
            ParamsType = "CodeLensParams",
            LspMethod = "textDocument_codeLens"
        },
        new
        {
            Method = "DocumentLinkRequest",
            ResultType = "List<DocumentLink>",
            ParamsType = "DocumentLinkParams",
            LspMethod = "textDocument_documentLink"
        },
        new
        {
            Method = "RenameRequest",
            ResultType = "WorkspaceEdit",
            ParamsType = "RenameParams",
            LspMethod = "textDocument_rename"
        },
        new
        {
            Method = "PrepareRenameRequest",
            ResultType = "Range",
            ParamsType = "PrepareRenameParams",
            LspMethod = "textDocument_prepareRename"
        },
        new
        {
            Method = "FoldingRangeRequest",
            ResultType = "List<FoldingRange>",
            ParamsType = "FoldingRangeParams",
            LspMethod = "textDocument_foldingRange"
        },
        new
        {
            Method = "SelectionRangeRequest",
            ResultType = "List<SelectionRange>",
            ParamsType = "SelectionRangeParams",
            LspMethod = "textDocument_selectionRange"
        },
        new
        {
            Method = "LinkedEditingRangeRequest",
            ResultType = "LinkedEditingRanges",
            ParamsType = "LinkedEditingRangeParams",
            LspMethod = "textDocument_linkedEditingRange"
        },
        new
        {
            Method = "InlineCompletionRequest",
            ResultType = "InlineCompletionList",
            ParamsType = "InlineCompletionParams",
            LspMethod = "textDocument_inlineCompletion"
        },
        new
        {
            Method = "InlineValueRequest",
            ResultType = "List<InlineValue>",
            ParamsType = "InlineValueParams",
            LspMethod = "textDocument_inlineValue"
        },
        new
        {
            Method = "MonikerRequest",
            ResultType = "List<Moniker>",
            ParamsType = "MonikerParams",
            LspMethod = "textDocument_moniker"
        },
        new
        {
            Method = "PrepareCallHierarchyRequest",
            ResultType = "List<CallHierarchyItem>",
            ParamsType = "CallHierarchyPrepareParams",
            LspMethod = "textDocument_prepareCallHierarchy"
        },
        new
        {
            Method = "CallHierarchyIncomingCallsRequest",
            ResultType = "List<CallHierarchyIncomingCall>",
            ParamsType = "CallHierarchyIncomingCallsParams",
            LspMethod = "callHierarchy_incomingCalls"
        },
        new
        {
            Method = "CallHierarchyOutgoingCallsRequest",
            ResultType = "List<CallHierarchyOutgoingCall>",
            ParamsType = "CallHierarchyOutgoingCallsParams",
            LspMethod = "callHierarchy_outgoingCalls"
        },
        new
        {
            Method = "PrepareTypeHierarchyRequest",
            ResultType = "List<TypeHierarchyItem>",
            ParamsType = "TypeHierarchyPrepareParams",
            LspMethod = "textDocument_prepareTypeHierarchy"
        },
        new
        {
            Method = "TypeHierarchySupertypesRequest",
            ResultType = "List<TypeHierarchyItem>",
            ParamsType = "TypeHierarchySupertypesParams",
            LspMethod = "typeHierarchy_supertypes"
        },
        new
        {
            Method = "TypeHierarchySubtypesRequest",
            ResultType = "List<TypeHierarchyItem>",
            ParamsType = "TypeHierarchySubtypesParams",
            LspMethod = "typeHierarchy_subtypes"
        },
        new
        {
            Method = "DocumentColorRequest",
            ResultType = "List<ColorInformation>",
            ParamsType = "DocumentColorParams",
            LspMethod = "textDocument_documentColor"
        },
        new
        {
            Method = "ColorPresentationRequest",
            ResultType = "List<ColorPresentation>",
            ParamsType = "ColorPresentationParams",
            LspMethod = "textDocument_colorPresentation"
        },
        new
        {
            Method = "FormattingRequest",
            ResultType = "List<TextEdit>",
            ParamsType = "DocumentFormattingParams",
            LspMethod = "textDocument_formatting"
        },
        new
        {
            Method = "RangeFormattingRequest",
            ResultType = "List<TextEdit>",
            ParamsType = "DocumentRangeFormattingParams",
            LspMethod = "textDocument_rangeFormatting"
        },
        new
        {
            Method = "OnTypeFormattingRequest",
            ResultType = "List<TextEdit>",
            ParamsType = "DocumentOnTypeFormattingParams",
            LspMethod = "textDocument_onTypeFormatting"
        },
        new
        {
            Method = "ResolveCompletionItemRequest",
            ResultType = "CompletionItem",
            ParamsType = "CompletionItem",
            LspMethod = "completionItem_resolve"
        },
        new
        {
            Method = "ResolveCodeLensRequest",
            ResultType = "CodeLens",
            ParamsType = "CodeLens",
            LspMethod = "codeLens_resolve"
        },
        new
        {
            Method = "ResolveDocumentLinkRequest",
            ResultType = "DocumentLink",
            ParamsType = "DocumentLink",
            LspMethod = "documentLink_resolve"
        },
        new
        {
            Method = "ResolveCodeActionRequest",
            ResultType = "CodeAction",
            ParamsType = "CodeAction",
            LspMethod = "codeAction_resolve"
        },
        new
        {
            Method = "ResolveWorkspaceSymbolRequest",
            ResultType = "SymbolInformation",
            ParamsType = "WorkspaceSymbol",
            LspMethod = "workspaceSymbol_resolve"
        },
        new
        {
            Method = "ResolveInlayHintRequest",
            ResultType = "InlayHint",
            ParamsType = "InlayHint",
            LspMethod = "inlayHint_resolve"
        },

        // 语义令牌
        new
        {
            Method = "SemanticTokensForFullRequest",
            ResultType = "SemanticTokens",
            ParamsType = "SemanticTokensParams",
            LspMethod = "textDocument_semanticTokens_full"
        },
        new
        {
            Method = "SemanticTokensForDeltaRequest",
            ResultType = "SemanticTokensDeltaOrSemanticTokens",
            ParamsType = "SemanticTokensDeltaParams",
            LspMethod = "textDocument_semanticTokens_full_delta"
        },
        new
        {
            Method = "SemanticTokensRangeRequest",
            ResultType = "SemanticTokens",
            ParamsType = "SemanticTokensRangeParams",
            LspMethod = "textDocument_semanticTokens_range"
        },

        // 诊断
        new
        {
            Method = "WorkspaceDiagnosticRequest",
            ResultType = "WorkspaceDiagnosticReport",
            ParamsType = "WorkspaceDiagnosticParams",
            LspMethod = "workspace_diagnostic"
        },
        new
        {
            Method = "DocumentDiagnosticRequest",
            ResultType = "DocumentDiagnosticReport",
            ParamsType = "DocumentDiagnosticParams",
            LspMethod = "textDocument_diagnostic"
        },

        // 工作区操作
        new
        {
            Method = "WorkspaceSymbolRequest",
            ResultType = "List<SymbolInformation>",
            ParamsType = "WorkspaceSymbolParams",
            LspMethod = "workspace_symbol"
        },
        new
        {
            Method = "ExecuteCommandRequest",
            ResultType = "object",
            ParamsType = "ExecuteCommandParams",
            LspMethod = "workspace_executeCommand"
        },
        new
        {
            Method = "ApplyEditRequest",
            ResultType = "ApplyWorkspaceEditResponse",
            ParamsType = "ApplyWorkspaceEditParams",
            LspMethod = "workspace_applyEdit"
        },
        new
        {
            Method = "WillCreateFilesRequest",
            ResultType = "WorkspaceEdit",
            ParamsType = "CreateFilesParams",
            LspMethod = "workspace_willCreateFiles"
        },
        new
        {
            Method = "WillRenameFilesRequest",
            ResultType = "WorkspaceEdit",
            ParamsType = "RenameFilesParams",
            LspMethod = "workspace_willRenameFiles"
        },
        new
        {
            Method = "WillDeleteFilesRequest",
            ResultType = "WorkspaceEdit",
            ParamsType = "DeleteFilesParams",
            LspMethod = "workspace_willDeleteFiles"
        },
        new
        {
            Method = "ConfigurationRequest",
            ResultType = "object[]",
            ParamsType = "ConfigurationParams",
            LspMethod = "workspace_configuration"
        },
        new
        {
            Method = "WorkspaceFoldersRequest",
            ResultType = "List<WorkspaceFolder>",
            ParamsType = "object",
            LspMethod = "workspace_workspaceFolders"
        },
        new
        {
            Method = "TextDocumentContentRequest",
            ResultType = "TextDocumentContentResult",
            ParamsType = "TextDocumentContentParams",
            LspMethod = "workspace_textDocumentContent"
        },

        // 窗口相关
        new
        {
            Method = "ShowMessageRequestRequest",
            ResultType = "MessageActionItem",
            ParamsType = "ShowMessageRequestParams",
            LspMethod = "window_showMessageRequest"
        },
        new
        {
            Method = "WorkDoneCreateRequest",
            ResultType = "object",
            ParamsType = "WorkDoneProgressCreateParams",
            LspMethod = "window_workDoneProgress_create"
        }
    };

    var standardNotifications = new[]
    {
        // 生命周期
        new { Method = "InitializedNotification", ParamsType = "InitializedParams", LspMethod = "initialized" },
        new { Method = "ExitNotification", ParamsType = "object", LspMethod = "exit" },

        // 文档同步
        new
        {
            Method = "DidOpenTextDocumentNotification",
            ParamsType = "DidOpenTextDocumentParams",
            LspMethod = "textDocument_didOpen"
        },
        new
        {
            Method = "DidChangeTextDocumentNotification",
            ParamsType = "DidChangeTextDocumentParams",
            LspMethod = "textDocument_didChange"
        },
        new
        {
            Method = "DidSaveTextDocumentNotification",
            ParamsType = "DidSaveTextDocumentParams",
            LspMethod = "textDocument_didSave"
        },
        new
        {
            Method = "DidCloseTextDocumentNotification",
            ParamsType = "DidCloseTextDocumentParams",
            LspMethod = "textDocument_didClose"
        },
        new
        {
            Method = "WillSaveTextDocumentNotification",
            ParamsType = "WillSaveTextDocumentParams",
            LspMethod = "textDocument_willSave"
        },

        // Notebook文档
        new
        {
            Method = "DidOpenNotebookDocumentNotification",
            ParamsType = "DidOpenNotebookDocumentParams",
            LspMethod = "notebookDocument_didOpen"
        },
        new
        {
            Method = "DidChangeNotebookDocumentNotification",
            ParamsType = "DidChangeNotebookDocumentParams",
            LspMethod = "notebookDocument_didChange"
        },
        new
        {
            Method = "DidSaveNotebookDocumentNotification",
            ParamsType = "DidSaveNotebookDocumentParams",
            LspMethod = "notebookDocument_didSave"
        },
        new
        {
            Method = "DidCloseNotebookDocumentNotification",
            ParamsType = "DidCloseNotebookDocumentParams",
            LspMethod = "notebookDocument_didClose"
        },

        // 工作区事件
        new
        {
            Method = "DidChangeConfigurationNotification",
            ParamsType = "DidChangeConfigurationParams",
            LspMethod = "workspace_didChangeConfiguration"
        },
        new
        {
            Method = "DidChangeWatchedFilesNotification",
            ParamsType = "DidChangeWatchedFilesParams",
            LspMethod = "workspace_didChangeWatchedFiles"
        },
        new
        {
            Method = "DidCreateFilesNotification",
            ParamsType = "CreateFilesParams",
            LspMethod = "workspace_didCreateFiles"
        },
        new
        {
            Method = "DidRenameFilesNotification",
            ParamsType = "RenameFilesParams",
            LspMethod = "workspace_didRenameFiles"
        },
        new
        {
            Method = "DidDeleteFilesNotification",
            ParamsType = "DeleteFilesParams",
            LspMethod = "workspace_didDeleteFiles"
        },
        new
        {
            Method = "DidChangeWorkspaceFoldersNotification",
            ParamsType = "DidChangeWorkspaceFoldersParams",
            LspMethod = "workspace_didChangeWorkspaceFolders"
        },

        // 窗口消息
        new { Method = "ShowMessageNotification", ParamsType = "ShowMessageParams", LspMethod = "window_showMessage" },
        new { Method = "LogMessageNotification", ParamsType = "LogMessageParams", LspMethod = "window_logMessage" },
        new
        {
            Method = "ShowDocumentNotification",
            ParamsType = "ShowDocumentParams",
            LspMethod = "window_showDocument"
        },
        new { Method = "TelemetryEventNotification", ParamsType = "object", LspMethod = "telemetry_event" },
        new
        {
            Method = "PublishDiagnosticsNotification",
            ParamsType = "PublishDiagnosticsParams",
            LspMethod = "textDocument_publishDiagnostics"
        },

        // 进度跟踪
        new { Method = "ProgressNotification", ParamsType = "ProgressParams", LspMethod = "progress" },
        new { Method = "LogTraceNotification", ParamsType = "LogTraceParams", LspMethod = "logTrace" },
        new { Method = "SetTraceNotification", ParamsType = "SetTraceParams", LspMethod = "setTrace" },

        // 能力注册
        new
        {
            Method = "RegisterCapabilityNotification",
            ParamsType = "RegistrationParams",
            LspMethod = "client_registerCapability"
        },
        new
        {
            Method = "UnregisterCapabilityNotification",
            ParamsType = "UnregistrationParams",
            LspMethod = "client_unregisterCapability"
        },

        // 刷新请求
        new { Method = "CodeLensRefreshNotification", ParamsType = "object", LspMethod = "workspace_codeLens_refresh" },
        new
        {
            Method = "FoldingRangeRefreshNotification",
            ParamsType = "object",
            LspMethod = "workspace_foldingRange_refresh"
        },
        new
        {
            Method = "SemanticTokensRefreshNotification",
            ParamsType = "object",
            LspMethod = "workspace_semanticTokens_refresh"
        },
        new
        {
            Method = "InlineHintRefreshNotification",
            ParamsType = "object",
            LspMethod = "workspace_inlayHint_refresh"
        },
        new
        {
            Method = "InlineValueRefreshNotification",
            ParamsType = "object",
            LspMethod = "workspace_inlineValue_refresh"
        },
        new
        {
            Method = "DiagnosticRefreshNotification",
            ParamsType = "object",
            LspMethod = "workspace_diagnostic_refresh"
        },
        new
        {
            Method = "TextDocumentContentRefreshNotification",
            ParamsType = "object",
            LspMethod = "workspace_textDocumentContent_refresh"
        },
        new
        {
            Method = "WorkDoneCancelNotification",
            ParamsType = "WorkDoneProgressCancelParams",
            LspMethod = "window_workDoneProgress_cancel"
        }
    };

    var count = standardNotifications.Length + standardRequests.Length;
#>

    // Auto-generated request methods
    <#
    foreach (var req in standardRequests)
    {
#>
    public static async Task<<#= req.ResultType #>?> <#= req.Method #>(
        this LSPCommunicationBase lspCommunication,
        <#= req.ParamsType #> @params,
        TimeSpan timeOut)
    {
        var result = await lspCommunication.SendRequest(
            LSPDefaultMethod.<#= req.LspMethod #>,
            await lspCommunication.SerializeToDocumentAsync(@params).ConfigureAwait(false),
            timeOut).ConfigureAwait(false);
        return await lspCommunication.DeserializeAsync<<#= req.ResultType #>>(result).ConfigureAwait(false);
    }
    <#
    }
#>

    // Auto-generated notification methods
    <#
    foreach (var notif in standardNotifications)
    {
#>
    public static async Task <#= notif.Method #>(
        this LSPCommunicationBase lspCommunication,
        <#= notif.ParamsType #> @params)
    {
        await lspCommunication.SendNotification(
            new NotificationMessage(
                LSPDefaultMethod.<#= notif.LspMethod #>,
                await lspCommunication.SerializeToDocumentAsync(@params).ConfigureAwait(false)));
    }
    <#
    }
#>

}